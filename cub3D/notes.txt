Raycasting tekniğini Türkçe olarak detaylı şekilde açıklayayım:

---

## 🎯 **Raycasting Nedir?**

Raycasting, 2D bir harita üzerinde 3D'ye benzer bir görünüm oluşturmak için kullanılan bir grafik işleme tekniğidir. Özellikle **Wolfenstein 3D** gibi eski oyunlarda kullanılmıştır. Gerçek zamanlı çalışan tam 3D motorlar çok pahalıydı, bu yüzden bu basitleştirilmiş teknik tercih edildi.

---

## 🧠 **Temel Fikir**

* Harita, karelerden oluşan 2D bir grid'dir. Her hücre ya `0` (boş) ya da bir sayı (duvar) içerir.
* Oyuncu ekranın ortasındadır. Ekrandaki her dikey çizgi için, oyuncudan çıkan bir ışın gönderilir.
* Bu ışın, haritada bir duvara çarpana kadar ilerletilir.
* Duvara çarptığı noktaya olan uzaklık hesaplanır ve bu uzaklığa göre duvarın ekranda çizileceği yükseklik belirlenir:

  * Yakın duvarlar büyük görünür,
  * Uzak duvarlar küçük görünür.

---

## 📐 **Matematiksel Temel**

* Oyuncunun konumu ve baktığı yön vektörlerle tanımlanır.
* Ayrıca bir **kamera düzlemi vektörü (plane vector)** tanımlanır. Bu, ekranın yatay düzlemini simgeler ve bakış yönüne dik olmalıdır.
* Ekrandaki her dikey çizgi (her `x` pikseli) için:

  * Işının yönü `dir + camera_plane * cameraX` olarak hesaplanır.
  * Işın harita üzerinde ilerletilir (bu işlem DDA algoritması ile yapılır).
  * Her adımda duvar olup olmadığı kontrol edilir.

---

## 🔁 **DDA Algoritması (Digital Differential Analyzer)**

* Işın bir hücreden diğerine geçerek ilerler.
* Her adımda ya `x` yönünde ya da `y` yönünde ilerler.
* Duvara çarpana kadar bu işlem devam eder.
* Duvara çarptığında, `perpWallDist` (dik uzaklık) hesaplanır (balık gözü etkisini önlemek için).

---

## 🖼️ **Ekrana Çizim**

* `perpWallDist` ile çizilecek duvarın yüksekliği hesaplanır:
  `lineHeight = ekran_yüksekliği / perpWallDist`
* Duvar, ekranın ortasına hizalanarak çizilir.
* Eğer vurulan duvar `y` kenarıysa (yan duvar), gölge efekti için renk koyulaştırılır.

---

## 🕹️ **Kontroller**

* Ok tuşlarıyla ileri, geri hareket ve sağa-sola dönüş yapılabilir.
* Dönüş işlemleri bir rotasyon matrisi ile yapılır:

  ```
  [ cos(a) -sin(a) ]
  [ sin(a)  cos(a) ]
  ```

---

## 🧱 **Texture'lı Raycaster**

* Duvardaki her kare, bir doku (texture) ile kaplanabilir.
* Duvara çarpma noktasının kesin koordinatı (örneğin `wallX`) hesaplanır ve bu koordinatla hangi texture parçasının kullanılacağı belirlenir.
* Duvarın her dikey çizgisi için, texture’ın y-koordinatı da hesaplanarak her piksel ayrı çizilir.

---

## 📦 **Performans Notları**

* Raycasting, modern GPU'lara göre yavaş olabilir çünkü:

  * Bellek önbelleğini (cache) verimli kullanmaz.
  * Dikey çizgi çizimi, yatay satır şeklinde saklanan ekran tamponlarıyla uyumsuzdur.
* Performansı artırmak için:

  * Texture verileri dikey olarak da saklanabilir.
  * Donanımsal (GPU) hızlandırma kullanılabilir (örneğin OpenGL).

---

## 📌 Raycasting ile Raytracing Farkı

| Özellik  | Raycasting                         | Raytracing                           |
| -------- | ---------------------------------- | ------------------------------------ |
| Hız      | Gerçek zamanlı (real-time) çalışır | Çok yavaştı (şimdi GPU ile hızlandı) |
| Amaç     | 3D benzeri görünüm                 | Gerçekçi ışık, yansıma, gölge        |
| Kullanım | Eski oyun motorları                | Modern film ve oyun grafikleri       |







